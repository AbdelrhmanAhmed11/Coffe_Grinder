DROP TABLE IF EXISTS AuditLogs;
DROP TABLE IF EXISTS UserLogins;
DROP TABLE IF EXISTS Alerts;
DROP TABLE IF EXISTS OrderDetails;
DROP TABLE IF EXISTS Orders;
DROP TABLE IF EXISTS CoffeeInventory;
DROP TABLE IF EXISTS CoffeeTypes;
DROP TABLE IF EXISTS Users;
DROP TABLE IF EXISTS OrderStatuses;

CREATE TABLE Users
(
    UserID INT PRIMARY KEY IDENTITY(1,1),
    Username NVARCHAR(50) NOT NULL,
    Password VARBINARY(64) NULL,
    Role NVARCHAR(10) NOT NULL,
    PhoneNumber NVARCHAR(15) NULL
);

CREATE TABLE CoffeeTypes
(
    CoffeeTypeID INT PRIMARY KEY IDENTITY(1,1),
    TypeName VARCHAR(100),
    Description NVARCHAR(MAX)
);

CREATE TABLE CoffeeInventory
(
    CoffeeID INT PRIMARY KEY IDENTITY(1,1),
    CoffeeTypeID INT,
    QuantityInStock INT CHECK (QuantityInStock >= 0),
    PricePerKg DECIMAL(10,2) CHECK (PricePerKg >= 0),
    FOREIGN KEY (CoffeeTypeID) REFERENCES CoffeeTypes(CoffeeTypeID)
);

CREATE TABLE OrderStatuses (
    StatusID INT PRIMARY KEY IDENTITY(1,1),
    StatusName NVARCHAR(50) NOT NULL
);

CREATE TABLE Orders
(
    OrderID INT PRIMARY KEY IDENTITY(1,1),
    OrderDate DATETIME,
    StatusID INT,
    CustomerName VARCHAR(100),
    TotalPrice DECIMAL(10,2),
    UserID INT,
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (StatusID) REFERENCES OrderStatuses(StatusID)
);

CREATE TABLE OrderDetails
(
    OrderDetailID INT PRIMARY KEY IDENTITY(1,1),
    OrderID INT,
    CoffeeID INT,
    Quantity INT CHECK (Quantity > 0),
    UnitPrice DECIMAL(10,2) CHECK (UnitPrice >= 0),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (CoffeeID) REFERENCES CoffeeInventory(CoffeeID)
);

CREATE TABLE Alerts
(
    AlertID INT PRIMARY KEY IDENTITY(1,1),
    Message TEXT,
    CreatedAt DATETIME DEFAULT GETDATE(),
    IsRead BIT DEFAULT 0,
    OrderID INT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

CREATE TABLE UserLogins (
    LoginID INT PRIMARY KEY IDENTITY(1,1),
    UserID INT,
    LoginTime DATETIME DEFAULT GETDATE(),
    IPAddress NVARCHAR(50),
    FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

CREATE TABLE AuditLogs (
    LogID INT PRIMARY KEY IDENTITY(1,1),
    TableName NVARCHAR(50),
    Action NVARCHAR(50),
    UserID INT,
    Timestamp DATETIME DEFAULT GETDATE(),
    Description NVARCHAR(MAX),
    FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

INSERT INTO Users (Username, Password, PhoneNumber, Role)
VALUES 
('Admin',HASHBYTES('SHA2_256', 'admin123') , NULL, 'Admin'),  
('user', NULL, '12345678', 'User');

INSERT INTO CoffeeTypes (TypeName, Description)
VALUES 
('Arabica', 'A well-known coffee type with a smooth, slightly acidic flavor.'),
('Robusta', 'A coffee type known for its strong, bitter taste.'),
('Liberica', 'A coffee type with a fruity and unique flavor.');

INSERT INTO CoffeeInventory (CoffeeTypeID, QuantityInStock, PricePerKg)
VALUES 
(1, 5, 250.00),
(2, 100, 200.00),
(3, 8, 300.00);

INSERT INTO OrderStatuses (StatusName)
VALUES ('Pending'), ('Completed'), ('Cancelled');

INSERT INTO Orders (OrderDate, StatusID, CustomerName, TotalPrice, UserID)
VALUES 
('2025-04-10', 1, 'Ahmed Ali', 500.00, 2),
('2025-04-12', 2, 'Mona Hassan', 600.00, 2);

INSERT INTO OrderDetails (OrderID, CoffeeID, Quantity, UnitPrice)
VALUES 
(1, 1, 2, 250.00),
(1, 2, 1, 200.00),
(2, 3, 2, 300.00);


INSERT INTO Alerts (Message, CreatedAt, OrderID)
VALUES 
('New order from Ahmed Ali, 2kg of Arabica and 1kg of Robusta.', '2025-04-10 12:00:00', 1),
('New order from Mona Hassan, 2kg of Liberica.', '2025-04-12 15:00:00', 2);

SELECT * FROM Users;
SELECT * FROM CoffeeTypes;
SELECT * FROM CoffeeInventory;
SELECT * FROM OrderStatuses;
SELECT * FROM Orders;
SELECT * FROM OrderDetails;
SELECT * FROM Alerts;
SELECT * FROM UserLogins;
SELECT * FROM AuditLogs;

go


CREATE TRIGGER trg_CoffeeInventory_Insert
ON CoffeeInventory
AFTER INSERT
AS
BEGIN
    DECLARE @CoffeeID INT, @UserID INT = 1;
    SELECT @CoffeeID = CoffeeID FROM inserted;

    INSERT INTO AuditLogs (TableName, Action, UserID, Description)
    VALUES ('CoffeeInventory', 'INSERT', @UserID, 'Inserted CoffeeID: ' + CAST(@CoffeeID AS NVARCHAR(50)));
END;
go

CREATE TRIGGER trg_CoffeeInventory_Update
ON CoffeeInventory
AFTER UPDATE
AS
BEGIN
    DECLARE @CoffeeID INT, @OldQty INT, @NewQty INT, @OldPrice DECIMAL(10,2), @NewPrice DECIMAL(10,2), @UserID INT = 1;

    SELECT TOP 1 
        @CoffeeID = i.CoffeeID,
        @OldQty = d.QuantityInStock,
        @NewQty = i.QuantityInStock,
        @OldPrice = d.PricePerKg,
        @NewPrice = i.PricePerKg
    FROM inserted i
    JOIN deleted d ON i.CoffeeID = d.CoffeeID;

    INSERT INTO AuditLogs (TableName, Action, UserID, Description)
    VALUES (
        'CoffeeInventory', 
        'UPDATE', 
        @UserID, 
        'Updated CoffeeID: ' + CAST(@CoffeeID AS NVARCHAR(50)) + 
        ' | Qty: ' + CAST(@OldQty AS NVARCHAR(50)) + ' -> ' + CAST(@NewQty AS NVARCHAR(50)) + 
        ' | Price: ' + CAST(@OldPrice AS NVARCHAR(50)) + ' -> ' + CAST(@NewPrice AS NVARCHAR(50))
    );
END;
go

CREATE TRIGGER trg_CoffeeInventory_Delete
ON CoffeeInventory
AFTER DELETE
AS
BEGIN
    DECLARE @CoffeeID INT, @OldQty INT, @OldPrice DECIMAL(10,2), @UserID INT = 1;

    SELECT TOP 1 
        @CoffeeID = CoffeeID, 
        @OldQty = QuantityInStock, 
        @OldPrice = PricePerKg
    FROM deleted;

    INSERT INTO AuditLogs (TableName, Action, UserID, Description)
    VALUES (
        'CoffeeInventory', 
        'DELETE', 
        @UserID, 
        'Deleted CoffeeID: ' + CAST(@CoffeeID AS NVARCHAR(50)) + 
        ' | Qty: ' + CAST(@OldQty AS NVARCHAR(50)) + 
        ' | Price: ' + CAST(@OldPrice AS NVARCHAR(50))
    );
END;
